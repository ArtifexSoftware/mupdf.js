.. include:: ../header.rst


Glossary
===========

.. _Glossary_Colors:

Colors
----------

Colors are specified as arrays with the appropriate number of components for the :doc:`../classes/ColorSpace`. Each number is a floating point between `0` and `1` for the component value.

Therefore colors are represented as an array of up to 4 component values.

For example:

- In the `DeviceCMYK` color space a color would be `[Cyan,Magenta,Yellow,Black]`. A full magenta color would therefore be `[0,1,0,0]`.
- In the `DeviceRGB` color space a color would be `[Red,Green,Blue]`. A full green color would therefore be `[0,1,0]`.
- In the `DeviceGray` color space a color would be `[Black]`. A full black color would therefore be `[0]`.


.. _mutool_run_js_api_matrix:






.. _Glossary_Matrix:

Matrices
-------------


Matrices are simply 6-element arrays representing a 3-by-3 transformation matrix as:


.. code-block:: bash

    / a b 0 \
    | c d 0 |
    \ e f 1 /

This matrix is represented in :title:`JavaScript` as `[a,b,c,d,e,f]`.

`Matrix`
~~~~~~~~~~~

**Properties**

`identity`

   The identity matrix, short hand for `[1,0,0,1,0,0]`.

   |example_tag|

   .. code-block:: javascript

      var m = mupdfjs.Matrix.identity;

**Methods**

.. method:: scale(sx:number, sy:number)

   Returns a scaling matrix, short hand for `[sx,0,0,sy,0,0]`.

   :arg sx: `number`. X scale as a floating point number.
   :arg sy: `number`. Y scale as a floating point number.

   :return: `[a,b,c,d,e,f]`.

   |example_tag|

   .. code-block:: javascript

      var m = mupdfjs.Matrix.scale(2,2);


.. method:: translate(tx:number, ty:number)

   Return a translation matrix, short hand for `[1,0,0,1,tx,ty]`.

   :arg tx: `number`. X translation as a floating point number.
   :arg ty: `number`. Y translation as a floating point number.

   :return: `[a,b,c,d,e,f]`.

   |example_tag|

   .. code-block:: javascript

      var m = mupdfjs.Matrix.translate(2,2);

.. method:: rotate(theta:number)

   Return a rotation matrix, short hand for `[cos(theta),sin(theta),-sin(theta),cos(theta),0,0]`.

   :arg theta: `number`. Rotation value.

   :return: `[a,b,c,d,e,f]`.

   |example_tag|

   .. code-block:: javascript

      var m = mupdfjs.Matrix.rotate(90);

.. method:: concat(a:[a,b,c,d,e,f], b:[a,b,c,d,e,f])

   Concatenate matrices `a` and `b`. Bear in mind that matrix multiplication is not commutative.

   :arg a: `[a,b,c,d,e,f]`. Matrix "a".
   :arg b: `[a,b,c,d,e,f]`. Matrix "b".

   :return: `[a,b,c,d,e,f]`.

   |example_tag|

   .. code-block:: javascript

      var m = mupdfjs.Matrix.concat([1,1,1,1,1,1], [2,2,2,2,2,2]);


.. method:: invert(matrix:[a,b,c,d,e,f])

   Inverts the supplied matrix and returns the result.

   :arg matrix: `[a,b,c,d,e,f]`. Matrix array.

   :return: `[a,b,c,d,e,f]`.

   |example_tag|

   .. code-block:: javascript

      var m = mupdfjs.Matrix.invert([1,0.5,1,1,1,1]);



.. _Glossary_Rectangles:

Rectangles
--------------------

Rectangles are 4-element arrays, specifying the minimum and maximum corners (typically upper left and lower right, in a coordinate space with the origin at the top left with descending y): `[ulx,uly,lrx,lry]`. Rectangles are always X- and Y-axis aligned.

If the minimum x coordinate is bigger than the maximum x coordinate, :title:`MuPDF` treats the rectangle as infinite in size.


`Rect`
~~~~~~~~~~~~~~

**Methods**

.. method:: isEmpty(rect:[x1,y1,x2,y2])

   Returns a boolean indicating if the rectangle is empty or not.

   :arg rect: `[x1,y1,x2,y2]`. Rectangle array.

   :return: `boolean`.

   |example_tag|

   .. code-block:: javascript

      var isEmpty = mupdfjs.Rect.isEmpty([0,0,0,0]); // true
      var isEmpty = mupdfjs.Rect.isEmpty([0,0,100,100]); // false



.. method:: isValid(rect:[x1,y1,x2,y2])

   Returns a boolean indicating if the rectangle is valid or not. Rectangles are considered "invalid" if `lrx` < `ulx` and/or if `lry` < `uly`.

   :arg rect: `[x1,y1,x2,y2]`. Rectangle array.

   :return: `boolean`.

   |example_tag|

   .. code-block:: javascript

      var isValid = mupdfjs.Rect.isValid([0,0,100,100]); // true
      var isValid = mupdfjs.Rect.isValid([0,0,-100,100]); // false


.. method:: isInfinite(rect:[x1,y1,x2,y2])

   Returns a boolean indicating if the rectangle is infinite or not.

   :arg rect: `[x1,y1,x2,y2]`. Rectangle array.

   :return: `boolean`.

   |example_tag|

   .. code-block:: javascript

      var isInfinite = mupdfjs.Rect.isInfinite([0x80000000,0x80000000,0x7fffff80,0x7fffff80]); //true
      var isInfinite = mupdfjs.Rect.isInfinite([0,0,100,100]); // false



.. method:: transform(rect:[x1,y1,x2,y2], matrix:[a,b,c,d,e,f])

   Returns a rectangle generated by transforming the supplied `rect` by the `matrix`.

   :arg rect: `[x1,y1,x2,y2`. `Rectangle` array.
   :arg matrix: `[a,b,c,d,e,f]`. `Matrix` array.

   :return: `[x1,y1,x2,y2]`.

   |example_tag|

   .. code-block:: javascript

      var m = mupdfjs.Rect.transform([0,0,100,100], [1,0.5,1,1,1,1]);



.. _Glossary_Object_Protocols:

Object Protocols
---------------------------


The following objects are standard :title:`JavaScript` objects with assumed properties (i.e. they follow their outlined protocol). They are used throughout the :title:`API` to support object types for various methods.



.. _Glossary_Object_Protocols_Link_Destination_Object:


Link Destination Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A link destination points to a location within a document and how a document viewer should show that destination.

It consists of a dictionary with keys for:

`chapter`
    The chapter within the document.

`page`
    The page within the document.

`type`
    Either "Fit", "FitB", "FitH", "FitBH", "FitV", "FitBV", "FitR" or "XYZ", controlling which of the keys below exist.

`x`
    The left coordinate, valid for "FitV", "FitBV", "FitR" and "XYZ".

`y`
    The top coordinate, valid for "FitH", "FitBH", "FitR" and "XYZ".

`width`
    The width of the zoomed in region, valid for "XYZ".

`height`
    The height of the zoomed in region, valid for "XYZ".

`zoom`
    The zoom factor, valid for "XYZ".



.. _Glossary_Object_Protocols_File_Specification_Object:

File Specification Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This object is used to represent a file.

In order to retrieve information from this object see methods described within :ref:`Embedded files in PDFs<mutool_object_pdf_document_embedded_files>`.



.. _Glossary_Object_Protocols_Embedded_File_Params_Object:

Embedded File Params Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Historical equivalent to Filespec Params Object. This `Object` contains metadata about a filespec, it has properties for:

`filename`
    The name of the embedded file.

`mimetype`
    The :title:`MIME` type of the embedded file, or `undefined` if none exists.

`size`
    The size in bytes of the embedded file contents.

`creationDate`
    The creation date of the embedded file.

`modificationDate`
    The modification date of the embedded file.


.. _Glossary_Object_Filespec_Params_Object:

Filespec Params Object
~~~~~~~~~~~~~~~~~~~~~~

This `Object` contains metadata about a filespec, it has properties for:

`filename`
    The name of the embedded file.

`mimetype`
    The :title:`MIME` type of the embedded file, or `undefined` if none exists.

`size`
    The size in bytes of the embedded file contents.

`creationDate`
    The creation date of the embedded file.

`modificationDate`
    The modification date of the embedded file.


.. _Glossary_Object_Protocols_PDF_Journal_Object:

PDF Journal Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This `Object` contains a numbered array of operations and a reference into this list indicating the current position.

`position`
    The current position in the journal.

`steps`
    An array containing the name of each step in the journal.




.. _Glossary_Object_Protocols_Stroking_State_Object:

Stroking State Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The stroking state is a dictionary with keys for:

    - `startCap`, `dashCap`, `endCap`
        "Butt", "Round", "Square", or "Triangle".

    - `lineCap`
        Set `startCap`, `dashCap`, and `endCap` all at once.

    - `lineJoin`
        "Miter", "Round", "Bevel", or "MiterXPS".

    - `lineWidth`
        Thickness of the line.

    - `miterLimit`
        Maximum ratio of the miter length to line width, before beveling the join instead.

    - `dashPhase`
        Starting offset for dash pattern.

    - `dashes`
        Array of on/off dash lengths.


|example_tag|

    `{dashes:[5,10], lineWidth:3, lineCap:'Round'}`


.. include:: ../footer.rst